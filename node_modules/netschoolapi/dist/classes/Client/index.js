"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ws_1 = __importDefault(require("ws"));
const node_fetch_1 = __importDefault(require("node-fetch"));
// Работа с куки
const decode_1 = __importDefault(require("./methods/cookie/decode"));
const encode_1 = __importDefault(require("./methods/cookie/encode"));
// Работа с заголовками
const get_1 = __importDefault(require("./methods/headers/get"));
const set_1 = __importDefault(require("./methods/headers/set"));
const del_1 = __importDefault(require("./methods/headers/del"));
// Работа с ссылками
const join_1 = __importDefault(require("./methods/url/join"));
const isAbsolute_1 = __importDefault(require("./methods/url/isAbsolute"));
const encodeQuery_1 = __importDefault(require("./methods/url/encodeQuery"));
class Client {
    constructor(origin) {
        this._cookie = {};
        this.cookie = {
            get: () => {
                return (0, encode_1.default)(this._cookie);
            },
            set: (cookie) => {
                var _a;
                for (let { key, val } of (_a = (0, decode_1.default)(cookie)) !== null && _a !== void 0 ? _a : [])
                    this._cookie[key] = val;
                return this.cookie.get();
            },
        };
        this._headers = [];
        this.headers = {
            get: () => {
                return (0, get_1.default)(this._headers);
            },
            set: (key, value) => {
                this._headers = (0, set_1.default)(this._headers, key, value);
                return this.headers.get();
            },
            del: (key) => {
                this._headers = (0, del_1.default)(this._headers, key);
                return this.headers.get();
            },
        };
        this._path = "/";
        this.path = {
            get: () => {
                return this._path;
            },
            set: (path) => {
                if ((0, isAbsolute_1.default)(path))
                    throw new Error("path must be relative to origin");
                this._path = path;
                return this.path.get();
            },
        };
        if (!(0, isAbsolute_1.default)(origin))
            throw new Error("origin must be an absolute path");
        this.origin = new URL(origin).origin;
        this.headers.set("Origin", this.origin);
        this.headers.set("Referer", this.origin);
        this.headers.set("Cookie", () => this.cookie.get());
    }
    static formData(body, init) {
        const data = [];
        for (let key in body)
            data.push(key + "=" + body[key]);
        return Object.assign(Object.assign({}, init), { body: encodeURI(data.join("&")), headers: Object.assign(Object.assign({}, init === null || init === void 0 ? void 0 : init.headers), { "Content-Type": "application/x-www-form-urlencoded" }) });
    }
    join(...paths) {
        return (0, join_1.default)(this.origin, this.path.get(), ...paths);
    }
    isSecurityWarning(res) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            return (((_b = (_a = res.headers.get("content-type")) === null || _a === void 0 ? void 0 : _a.includes) === null || _b === void 0 ? void 0 : _b.call(_a, "text/html")) &&
                +((_c = res.headers.get("content-length")) !== null && _c !== void 0 ? _c : "") < 1000 &&
                !res.headers.has("filename") &&
                (yield res.clone().text()).includes("/asp/SecurityWarning.asp"));
        });
    }
    ws(url, init) {
        if (!(0, isAbsolute_1.default)(url))
            url = this.join(url);
        if (init === null || init === void 0 ? void 0 : init.params)
            url += (0, encodeQuery_1.default)(init.params);
        return new ws_1.default(url.replace("http", "ws"), Object.assign(Object.assign({}, init), { headers: Object.assign(Object.assign({}, init === null || init === void 0 ? void 0 : init.headers), this.headers.get()) }));
    }
    request(url, init) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (!(0, isAbsolute_1.default)(url))
                url = this.join(url);
            if (init === null || init === void 0 ? void 0 : init.params)
                url += (0, encodeQuery_1.default)(init.params);
            const res = yield (0, node_fetch_1.default)(url, Object.assign(Object.assign({}, init), { headers: Object.assign(Object.assign({}, init === null || init === void 0 ? void 0 : init.headers), this.headers.get()) }));
            if (!res.ok)
                throw new Error("Fetch failed");
            if (yield this.isSecurityWarning(res)) {
                yield this.post("../asp/SecurityWarning.asp", Client.formData({
                    at: this.headers.get().at,
                    WarnType: 2,
                }));
                return this.request(url, init);
            }
            this.cookie.set((_a = res.headers.raw()) === null || _a === void 0 ? void 0 : _a["set-cookie"]);
            return res;
        });
    }
    get(url, init) {
        return this.request(url, Object.assign(Object.assign({}, init), { method: "get" }));
    }
    post(url, init) {
        return this.request(url, Object.assign(Object.assign({}, init), { method: "post" }));
    }
}
exports.default = Client;
//# sourceMappingURL=index.js.map