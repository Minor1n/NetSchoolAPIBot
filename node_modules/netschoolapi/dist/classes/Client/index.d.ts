import WS, { ClientOptions } from "ws";
import { Response, RequestInit } from "node-fetch";
export declare type DecodeCookie = {
    [key: string]: string;
};
export declare type ExtraHeaders = {
    key: string;
    value: string | Function;
}[];
export declare type ExtraHeadersRaw = {
    [key: string]: string;
};
export interface InitWS extends ClientOptions {
    params?: {
        [key: string]: any;
    };
}
export interface InitRequest extends RequestInit {
    params?: {
        [key: string]: any;
    };
}
export default class Client {
    static formData(body: {
        [key: string]: any;
    }, init?: InitRequest): InitRequest;
    private origin;
    constructor(origin: string);
    private _cookie;
    private cookie;
    private _headers;
    headers: {
        get: () => ExtraHeadersRaw;
        set: (key: string, value: string | Function) => ExtraHeadersRaw;
        del: (key: string) => ExtraHeadersRaw;
    };
    private _path;
    path: {
        get: () => string;
        set: (path: string) => string;
    };
    private join;
    private isSecurityWarning;
    ws(url: string, init?: InitWS): WS;
    request(url: string, init?: InitRequest): Promise<Response>;
    get(url: string, init?: Omit<InitRequest, "method">): Promise<Response>;
    post(url: string, init?: Omit<InitRequest, "method">): Promise<Response>;
}
