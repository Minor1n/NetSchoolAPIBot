"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Grades_1 = __importDefault(require("../classes/Grades"));
const dateNum_1 = require("../utils/dateNum");
const checks_1 = require("../utils/checks");
function grades(credentials) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context } = yield checks_1.sessionValid.call(this);
        let { subjectId, start, end, classId, studentId } = credentials;
        if (!context.subjectExists(subjectId))
            throw new Error(`Предмета ${subjectId} не существует`);
        classId = checks_1.classIdValid.call(this, classId);
        studentId = checks_1.studentIdValid.call(this, studentId);
        if (!start)
            start = context.year.start;
        if (!end)
            end = context.year.end;
        checks_1.dateValid.call(this, start, end);
        const [types, htmlText] = yield Promise.all([
            this.assignmentTypes(),
            this.reportFile({
                url: "reports/studentgrades/queue",
                filters: [
                    {
                        filterId: "SID",
                        filterValue: studentId,
                    },
                    {
                        filterId: "PCLID_IUP",
                        filterValue: classId + "_0",
                    },
                    {
                        filterId: "SGID",
                        filterValue: subjectId,
                    },
                    {
                        filterId: "period",
                        filterValue: (0, dateNum_1.date2JSON)(start) + " - " + (0, dateNum_1.date2JSON)(end),
                    },
                ],
            }),
        ]);
        return new Grades_1.default({ types, htmlText });
    });
}
exports.default = grades;
//# sourceMappingURL=grades.js.map